Link --> https://leetcode.com/problems/power-of-two/

Approach1 --> Brute-Force: Multiply 2 by itself until you get number>=Given Value

Approach2 --> Bit-Manipulation, as we know any powerOfTwo value has only one set-Bit

Approach3 --> As Given Constraint is 2^31 so check last value which is less than 2^31 and also a power of two . Divide Given number by itself to check powerOfTwo or not


class Solution {
      int power(int x,int y){
        int res = 1;
        while(y>0){
            if((y&1)!=0){
                res = res*x;
        }
            x = x*x;
            y=y>>1;
       }
        return res;
    }
    int log(int a,int b){
        return (int)(Math.log(a)/Math.log(b));
   }
    public boolean isPowerOfTwo(int n) {
        // if(n==0){
        //     return false;
        // }
        // if(n==-Math.pow(2,31)){
        //     return false;
        // }
        // int num = Math.abs(n);
        // return ((n & (n-1))==0);
        int maxValuePowerTwo = power(2,log(Integer.MAX_VALUE,2));
        return n>0 && maxValuePowerTwo%n==0;
    }
}