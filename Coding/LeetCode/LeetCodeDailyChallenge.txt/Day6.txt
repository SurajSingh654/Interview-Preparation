Link: --> https://leetcode.com/problems/intersection-of-two-linked-lists/

Question: --> Given the heads of two singly linked-lists headA and headB, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return null.

The test cases are generated such that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.


Approach: --> https://leetcode.com/problems/intersection-of-two-linked-lists/discuss/2116221/Visual-Explanation-or-One-Pass-JAVA


Solution:

public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
    ListNode ptrA = headA, ptrB = headB;
    while (ptrA != ptrB) { // loop until we found the first common node
        ptrA = ptrA == null ? headB : ptrA.next; // once we're done with A, move to B
        ptrB = ptrB == null ? headA : ptrB.next; // once we're done with B, move to A
	}
	return ptrA;
}

Time Complexity: O(A + B) where A and B are the lengths of each linked list.
Space Complexity: O(1)