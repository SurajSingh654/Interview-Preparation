Link: --> https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

Question: --> Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

Approach: --> The approach to this question differs to that of the classic Two Sum problem in that we have some direction with how we want to search for our target.

Important: --> Since the array is sorted, we can make some general observations:
             **> Smaller sums would come from the left half of the array
             **> Larger sums would come from the right half of the array
             Therefore, using two pointers starting at the end points of the array, we can choose to increase or decrease our current sum however we like

Explanation: --> https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/discuss/2128501/Two-Pointers-or-Visual-Explanation-JAVA




Solution:
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int first = 1;
        int second = numbers.length;
        while(first<=second){
            int sum = numbers[first-1] + numbers[second-1];
            if(sum==target){
                break;
            }
            if(sum>target){
                second--;
            }else{
                first++;
            }
        }
        return new int[]{first,second};
    }
}