Link: --> https://leetcode.com/problems/remove-palindromic-subsequences/submissions/

Question: --> You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.

Approach: --> What makes a subsequence a palindrome? Well of course it's when the string is the same forwards and backwards. Is "a" a palindrome? Yes. Is "aa" a palindrome? Yes. What about "aaaaaaaaa"? Yes!

The main observation here is that any string consisting of the same letters is a palindrome. Since we're working with subsequences and the only characters in the string are 'a' and 'b', we know we can get rid of all palindromes in at most 2 steps.

Explanation: --> https://leetcode.com/problems/remove-palindromic-subsequences/discuss/2124240/One-Major-Observation-or-JAVA-Explanation



Solution:

class Solution {
    private boolean isPalindrome(String s) {
	int i = 0, n = s.length();
	while (i <= n/2)
		if (s.charAt(i) != s.charAt(n-1-i++)) return false;
	return true;
}
       public int removePalindromeSub(String s) {
	if (isPalindrome(s)) return 1;
	return 2;
}

}