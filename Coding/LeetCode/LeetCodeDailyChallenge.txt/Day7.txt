Link: --> https://leetcode.com/problems/merge-sorted-array/

Question: --> You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

Approach: --> https://leetcode.com/problems/merge-sorted-array/discuss/2120234/Visual-Explanation-or-O(1)-Space-JAVA

Solution:

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        int j = m-1;
        int k = n-1;
        int i = m+n-1;
        while((i>=0)&&(j>=0)&&(k>=0)){
            if(nums1[j]>=nums2[k]){
                nums1[i]=nums1[j];
                j--;
                i--;
            }
            else{
                nums1[i]=nums2[k];
                k--;
                i--;
            }   
        }
        if(k>=0){
            while(k>=0){
                nums1[i]=nums2[k];
                k--;
                i--;
            }
        }
    }
}

Solution:


class Solution { 
    public void merge(int[] A, int m, int[] B, int n) {
	for (int i = m+n-1, a = m-1, b = n-1; i>=0 && b>=0; i--) {
		if (a >= 0 && A[a] > B[b]) A[i] = A[a--]; 
		else A[i] = B[b--];
	  }        
    }
}