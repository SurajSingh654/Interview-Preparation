Link: https://leetcode.com/problems/triangle/

Question: Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

Approach: https://leetcode.com/problems/triangle/discuss/2144980/From-Memoization-to-DP-or-JAVA-Explanation

Solution: 1 {Use DP}

class Solution {    
public int minimumTotal(List<List<Integer>> triangle) {
    int n = triangle.size();
	int[][] dp = new int[n+1][n+1];

	for (int level=n-1; level>=0; level--)
		for (int i=0; i<=level; i++)
			dp[level][i] = triangle.get(level).get(i) + Math.min(dp[level+1][i], dp[level+1][i+1]);

	return dp[0][0];  
  }
}

Solution: 2 {Use Memoization}

class Solution {
    private Integer[][] memo;
     private int dfs(int level, int i, List<List<Integer>> triangle) {
	if (memo[level][i] != null) return memo[level][i];

	int path = triangle.get(level).get(i);
	if (level < triangle.size() - 1) 
		path += Math.min(dfs(level + 1, i, triangle), dfs(level + 1, i + 1, triangle));

	return memo[level][i] = path;
}
    
public int minimumTotal(List<List<Integer>> triangle) {
	int n = triangle.size();
	memo = new Integer[n][n];
	return dfs(0, 0, triangle);
 }
}