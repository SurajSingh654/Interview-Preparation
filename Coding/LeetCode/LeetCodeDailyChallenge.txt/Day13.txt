Link: https://leetcode.com/problems/triangle/submissions/

Question: Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

Explanation: https://www.youtube.com/watch?v=NPZn9jBrX8U

Approach: Apply Recursion and Memoization and get min(PathDown,PathDiagonal)

Solution: 
class Solution {
int minPath(List<List<Integer>> triangle,int row,int col,int[][] dp){
    if(row==triangle.size()-1){
        return triangle.get(row).get(col);
    }
    if(dp[row][col]!=-1){
        return dp[row][col];
    }
    int path1 = triangle.get(row).get(col)+minPath(triangle,row+1,col,dp);
    int path2 = triangle.get(row).get(col)+minPath(triangle,row+1,col+1,dp);
    return dp[row][col] = Math.min(path1,path2);
}
    
    
public int minimumTotal(List<List<Integer>> triangle) {
    int[][] dp = new int[triangle.size()][triangle.size()];
    Arrays.stream(dp).forEach(a -> Arrays.fill(a, -1));
    return minPath(triangle,0,0,dp);
    
 }
}