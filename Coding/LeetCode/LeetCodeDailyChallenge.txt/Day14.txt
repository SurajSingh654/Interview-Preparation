Link: https://leetcode.com/problems/delete-operation-for-two-strings/

Question: Given two strings word1 and word2, return the minimum number of steps required to make word1 and word2 the same.

In one step, you can delete exactly one character in either string.

Approach: Use Recursion & Memoization start from last in word1 & word2 ...If having equal characters add 1 + recursive call for index1--,index2-- ...If characters arn't equal then take Max(two recursive calls) ...

Explanation: https://www.youtube.com/watch?v=NPZn9jBrX8U


Solution: 
class Solution {
    int longestSubSequence(String word1,int index1, String word2,int index2,int[][] arr){
        if(index1<0||index2<0){
            return 0;
        }
        if(arr[index1][index2]!=-1){
            return arr[index1][index2];
        }
        if(word1.charAt(index1)==(word2.charAt(index2))){
            return arr[index1][index2] = 1 + longestSubSequence(word1,index1-1,word2,index2-1,arr);
        }else{
            return arr[index1][index2] = Math.max(longestSubSequence(word1,index1-1,word2,index2,arr),longestSubSequence(word1,index1,word2,index2-1,arr));
        }
            
    }
    public int minDistance(String word1, String word2) {
        int[][] arr = new int[word1.length()][word2.length()];
        Arrays.stream(arr).forEach(a -> Arrays.fill(a, -1));
       return (word1.length()+word2.length())-(longestSubSequence(word1,word1.length()-1,word2,word2.length()-1,arr)<<1);
    }
}