Link: https://www.interviewbit.com/problems/remove-duplicates-from-sorted-array/

Question: Given a sorted array A consisting of duplicate elements.

 Your task is to remove all the duplicates and return a sorted array of distinct elements consisting of all distinct elements present in A.

But, instead of returning an answer array, you have to rearrange the given array in-place such that it resembles what has been described above.
Hence, return a single integer, the index(1-based) till which the answer array would reside in the given array A.

Note: This integer is the same as the number of integers remaining inside A had we removed all the duplicates.
Look at the example explanations for better understanding.



Approach: Notice that the array is sorted.
This implies that all repetitions for an element are clustered together in the array.

**Try maintaining 2 pointers in the array: **

One pointer iterates over the array and
Other pointer only moves per occurrence of a value in the array.
Now you need to make sure we choose only one occurrence per cluster of repetition in the array, we could probably just check if A[i] != A[i+1].
So, the second pointer only moves when A[i] != A[i+1]

Solution: 
public class Solution {
	public int removeDuplicates(ArrayList<Integer> a) {
        int start  = 0;
        int end = 1;
        while(end<a.size()){
            if((a.get(start)-a.get(end))==0){
                end++;
            }else{
                a.set(start+1,a.get(end));
                start++;
                end++;
            }
        }
        return start+1;
	}
}