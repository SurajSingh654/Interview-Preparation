Link --> https://www.interviewbit.com/problems/find-nth-fibonacci/hints/
Solution Video --> https://www.youtube.com/watch?v=iZFXQMTdW-c
Question --> Given an integer A you need to find the Ath fibonacci number modulo 109 + 7.

The first fibonacci number F1 = 1

The first fibonacci number F2 = 1

The nth fibonacci number Fn = Fn-1 + Fn-2 (n > 2)

Approach --> As A is very large we can not use normal recursion or dynamic programming to find the fibonacci number.
We need to find some more efficient trick.

Method 1: ( Using power of the matrix {{1, 1},{1, 0}} )
This O(A) approach which relies on the fact that if we n times multiply the matrix M = {{1, 1},{1, 0}} to itself (in other words calculate power(M, n )), then we get the (n+1)th Fibonacci number as the element at row and column (0, 0) in the resultant matrix.

The matrix representation gives the following closed expression for the Fibonacci numbers:


This method can be optimized to work in O(LogA) time complexity.
We can do recursive multiplication to get power(M, n) in the previous method using this trick.

Time Complexity: O(LogA)
Extra Space: O(LogA) if we consider the function call stack size, otherwise O(1).


Solution!

public class Solution {
    int mod = (int)(1e9) + 7;
    public int solve(int A) {
        long[][] f = {{1 , 1} , {1 , 0}};
        return (int)(power(f , A-1)[0][0] %mod);
    }public long[][] power(long[][] f , int n){
        if(n == 1) return f;
        long[][] new_f = (power(f , n/2));
        
        if(n%2 == 0) return mult(new_f , new_f);
        else return mult(f , mult(new_f , new_f));
    }public long[][] mult(long[][] A , long[][] B){
        long[][] res = new long[A.length][B[0].length];
        
        for(int i = 0 ; i < res.length ; i++){
            for(int j = 0 ; j < res[0].length ; j++){
                
                for(int k = 0 ; k < A[0].length ; k++){
                    res[i][j] =(res[i][j] + A[i][k] * B[k][j])%mod;
                }
            }
        }return res;
    }
}



Note --> For Small Numbers 

public class Solution {
    HashMap<Integer  ,Integer> hm = new HashMap<>();
    int mod = 1000000007;
    public int fib(int A,HashMap<Integer,Integer> hm){
      if(A==1||A==2){
            return 1;
        }
        if(hm.containsKey(A)){
           return hm.get(A);
        }
        int val = (fib(A-1,hm)+fib(A-2,hm))%mod;
        hm.put(A,val);
        return val;
    }
    public int solve(int A) {
        return fib(A,hm);
    }
}