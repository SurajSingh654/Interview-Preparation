Link --> https://www.interviewbit.com/problems/max-non-negative-subarray/

Question --> Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.

The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.

Maximum sub-array is defined in terms of the sum of the elements in the sub-array.

Find and return the required subarray.

NOTE:  

If there is a tie, then compare with segment's length and return segment which has maximum length.
If there is still a tie, then return the segment with minimum starting index.


Approach --> Sum subarray until you encounter negative element , store it in arrayList again sum subarray when you encounter positive element after negative element , compare both arrayLi and repeat this process until you traverse whole ArrayList ...


Solution!

public class Solution {
	public ArrayList maxset(ArrayList a) {
	    long maxSum = 0;
	    long newSum = 0;
	    ArrayList maxArray = new ArrayList();
	    ArrayList newArray = new ArrayList();
	    for (Integer i : a) {
	        if (i >= 0) {
	            newSum += i;
	            newArray.add(i);
	        } else {
	            newSum = 0;
	            newArray = new ArrayList();
	        }
	        if ((maxSum < newSum) || ((maxSum == newSum) && (newArray.size() > maxArray.size()))) {
	            maxSum = newSum;
	            maxArray = newArray;
	        }
	    }
	    return maxArray;
	}
}

