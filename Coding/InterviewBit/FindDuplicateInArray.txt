Link --> https://www.interviewbit.com/problems/find-duplicate-in-array/

Question --> Given a read only array of n + 1 integers between 1 and n, find one number that repeats in linear time using less than O(n) space and traversing the stream sequentially O(1) times.

Approach --> Use HashMap to store elements with their frequency , if any element repeat twice return it else returi -1;

New Solution & Approach --> {

Approach ->  Split the numbers from 1 to n in sqrt(n) ranges so that range i corresponds to [sqrt(n) * i .. sqrt(n) * (i + 1)).

Do one pass through the stream of numbers and figure out how many numbers fall in each of the ranges.

At least one of the ranges will contain more than sqrt(n) elements.

Do another pass and process just those elements in the oversubscribed range.

Using a hash table to keep frequencies, youâ€™ll find a repeated element.

This is O(sqrt(n)) memory and 2 sequential passes through the stream.

Solution -->  import java.lang.Math;
import java.util.Collections;

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int repeatedNumber(final List<Integer> A) {
        int n = A.size()-1,countOfN=0;
        double root = Math.sqrt(n);
        int c = (int)Math.ceil(root);

        List<Integer> count = new ArrayList<Integer>(c);

        //initialize count
        for(int i=0;i<c;i++) count.add(0);

        //calculating frequency for buckets of size sqrt(n)
        for(int i : A){
            int index = (int)(i/root);
            if(index<c) count.set(index,count.get(index)+1);
            else countOfN++; //incase n is a perfect square
        }

        //edge case: n is a perfect square and it also is a duplicate
        if(countOfN>1) return n;

        for(int i=0;i<c;i++){
            // check if the bucket has more count than expected
            if(count.get(i)>getExpectedBucketSize(i,n,root)){

                //find out the duplicate in the bucket which is of size ~sqrt(n)
                // using frequency table per each element
                Collections.fill(count,0);
                for(int j : A){
                    if(j>=Math.ceil(root*i) && j<Math.ceil(root*(i+1))){
                        if(count.get((int)(j-Math.ceil(root*i)))>=1.0) return j;
                        count.set((int)(j-Math.ceil(root*i)),1);
                    }
                }
            }
        }

        return -1;
    }

    //get expected bucket size for ith partition (i=0,1,2,3,..)
    //edge case 1: zeroth partition: dont include 0
    //edge case 2: last partition: include n incase n is not a perfect square
    public double getExpectedBucketSize(int i,int n,double root){
        return min(n+1,Math.ceil(root*(i+1))) - max(Math.ceil(root*i),1);
    }

    public double max(double a,double b){
        return a>b?a:b;
    }

    public double min(double a,double b){
        return a>b?b:a;
    }
}




}


public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int repeatedNumber(final List<Integer> A) {
        HashMap<Integer,Integer> hm = new HashMap<Integer,Integer>();
        for(Integer i:A){
            if(hm.containsKey(i)){
                return i;
            }else{
                hm.put(i,1);
            }
        }
        return -1;
    }
}
