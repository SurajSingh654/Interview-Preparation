Link --> https://www.interviewbit.com/problems/add-binary-strings/

Question --> Given two binary strings, return their sum (also a binary string).
Example:

a = "100"


b = "11"
Return a + b = "111".

Approach --> First to make length of string a and b equal by adding leading zeroes and start sum from last bits and Store carry in a variable ...

Solution1: 

public class Solution {

    public String getString(String A,String B,int length){
         StringBuilder sb =  new StringBuilder(A);
                boolean carry = false;
                int i,j;
                for(i=length-1;i>=0;i--){
                    if(B.charAt(i)==A.charAt(i) && A.charAt(i)=='0'){
                        if(carry){
                           sb.setCharAt(i,'1');
                           carry = false;
                        }
                    }else if(B.charAt(i)==A.charAt(i) && A.charAt(i)=='1'){
                        if(carry){
                            sb.setCharAt(i,'1');
                        }else{
                            sb.setCharAt(i,'0');
                            carry = true;
                        }
                    }else{
                      if(carry){
                         sb.setCharAt(i,'0');
                      }else{
                         sb.setCharAt(i,'1');
                      }
                    }
                }
                    if(carry){
                        sb = sb.insert(0,'1');
                    }
                
            return sb.toString(); 
    }
    public String addBinary(String A, String B) {
        int aLen = A.length();
        int bLen = B.length();
        int length = Math.max(aLen,bLen);
        if(aLen!=bLen){
            if(aLen>bLen){
                for(int i=0;i<aLen-bLen;i++){
                      B = B.join("","0",B);
                }
               
            }else{
                for(int i=0;i<bLen-aLen;i++){
                      A = A.join("","0",A);
                }
            }
        }
                String s = getString(A,B,length);
                return s;

    }
   
}


Solution2{more concise}:

public class Solution {
	
	public String addBinary(String A, String B) {
	    
	    int nA, nB;
	    char res[];
	    int i, j, k;
	    
	    nA = A.length();
	    nB = B.length();
	    res = new char[Math.max(nA, nB) + 1];
	    
	    k = Math.max(nA, nB);
	    i = nA - 1;
	    j = nB - 1;
	    int sum = 0, carry = 0;
	    
	    while (i >= 0 || j >= 0 || carry != 0) {
	        
	        sum = carry;
	        
	        if (i >= 0)
	            sum += (A.charAt(i) - '0');
	        if (j >= 0)
	            sum += (B.charAt(j) - '0');
	            
	        res[k] = (char) ((sum % 2) + '0');
	        
	        carry = sum / 2;
	        
	        i--;
	        j--;
	        k--;
	        
	    }
	    
	    if (res[0] == '1')
	        return new String(res);
	    
	    int len = Math.max(nA, nB);
	    
	    return new String(res, 1, len);
	    
	}
}
