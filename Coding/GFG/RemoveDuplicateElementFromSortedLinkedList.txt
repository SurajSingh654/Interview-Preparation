Link --> https://practice.geeksforgeeks.org/problems/remove-duplicate-element-from-sorted-linked-list/1#

Question --> Given a singly linked list consisting of N nodes. The task is to remove duplicates (nodes with duplicate values) from the given list (if exists).
Note: Try not to use extra space. Expected time complexity is O(N). The nodes are arranged in a sorted way.


Approach --> Take two pointers{previous and current} , if previous.data == current.data then make previous node must point current.next and make current == null and move current to current.next

Solution!

class GfG
{

    //Function to remove duplicates from sorted linked list.
    Node removeDuplicates(Node head)
    {
	// Your code here	
	if(head==null||head.next==null){
	    return head;
	}
	Node previousNode = head;
	Node currentNode = head.next;
	while(currentNode!=null){
	    if(previousNode.data!=currentNode.data){
	        previousNode = previousNode.next;
	        currentNode = currentNode.next;
	    }else{
	       previousNode.next = currentNode.next;
	       currentNode.next = null;
	       currentNode = previousNode.next;
	    }
	 }
	 return head;
    }
}
